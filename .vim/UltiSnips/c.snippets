snippet form "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${4}
}
endsnippet

snippet forim "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${5}
}
endsnippet
snippet forc
for (${1:i}=${2:0}; ${3:$1<n}; $1${4:++}) {
	${5}
}
endsnippet
# if
snippet ifm
if (${1:true}) {
	${2}
}
endsnippet

snippet ifem
if (${1:true}) {
	${2:${VISUAL}}
} else {
	${3}
}
endsnippet
# else
snippet elm
else {
	${1}
}
endsnippet
# else if
snippet elifm
else if (${1:true}) {
	${2}
}
endsnippet
# ifi
snippet ifim
if (${1:true}) ${1};
endsnippet
# while
snippet whm
while (${1:/* condition */}) {
	${2}
}
endsnippet
# do... while
snippet dom
do {
	${2}
} while (${1:/* condition */});
endsnippet
# struct
snippet stm
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
	${2:Data} 
}${3: /* optional variable list */};
endsnippet

# scanf
snippet sc
scanf("${1:%d}", ${2});
endsnippet
snippet scd
scanf("%d", ${1:});
endsnippet
snippet scf
scanf("%f", ${1:});
endsnippet
snippet scs
scanf("%s", ${1:});
endsnippet
# printf
snippet prn
printf("${1:%s}"${2});
endsnippet
snippet prk
printk("enter func %s, at line %d \n", __func__, __LINE__);
endsnippet
snippet prf
printf("enter func %s, at line %d \n", __func__, __LINE__);
endsnippet
#file handling
snippet fopen "fopen" b
${1:fptr} = fopen(${2:fname}, "${3:w}");
if ($1 == NULL) {
	printf(${4:"Error in opening file!"});
	exit(1);
}
endsnippet
